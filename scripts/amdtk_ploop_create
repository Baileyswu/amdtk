#!/usr/bin/env python

"""Create and initialize a new phone loop model."""

import argparse
import pickle
import numpy as np
from amdtk.models import BayesianGaussianDiagCov
from amdtk.models import BayesianMixture
from amdtk.models import GMMAcousticModel
from amdtk.models import TruncatedDirichletProcess
from amdtk.models import UnigramDecodableGraph
from amdtk.models import BayesianInfinitePhoneLoop


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--seed', default=-1, type=int, help='value to seed '
                        'the random generators with')
    parser.add_argument('--concentration', default=1, type=float,
                        help='concentration of the Dirichlet Process '
                        '(default: 1)')
    parser.add_argument('--truncation', default=50, type=int,
                        help='truncation of the Dirichlet process '
                        '(default: 50)')
    parser.add_argument('--nstates', default=1, type=int, help='number of '
                        'states per HMM (default: 1)')
    parser.add_argument('--ncomponents', default=1, type=int, help='number of '
                        'Gaussian per GMM (default: 1)')
    parser.add_argument('--alpha', default=3, type=float,
                        help='hyper-parameter of the GMM weights (default: 3')
    parser.add_argument('--a', default=3, type=float, help='hyper-parameter '
                        'of the Gaussians variance (shape) (default: 3)')
    parser.add_argument('--b', default=3, type=float, help='hyper-parameter '
                        'of the Gaussians variance (scale) (default: 3)')
    parser.add_argument('--kappa', default=5, type=float,
                        help='hyper-parameter of the Gaussians mean (coeff '
                        'precision) (default: 5)')
    parser.add_argument('stats', help='stats of the features')
    parser.add_argument('output', help='the created model')
    args = parser.parse_args()

    # Seed the random generators if requested.
    # ------------------------------------------------------------------
    if args.seed > 0:
        import numpy
        import random
        numpy.random.seed(args.seed)
        random.seed(args.seed)

    # Load the stats of the data for initializing the Gaussians.
    # ------------------------------------------------------------------
    with open(args.stats, 'rb') as f:
        stats = pickle.load(f)

    # Hyper-parameters for the Gamma distribution is computed from the
    # variance of the data.
    # ------------------------------------------------------------------
    b = args.b * stats['cov']

    # Initialize the GMMs.
    # ------------------------------------------------------------------
    gmms = []
    for i in range(args.truncation):
        for j in range(args.nstates):

            # Initialize the set of Gaussian for the current GMM.
            # ----------------------------------------------------------
            gaussians = []
            for k in range(args.ncomponents):

                # Initialize the mean of the posterior distribution of
                # the Gaussian by sampling a random value from a
                # Gaussian mean and variance given by the statistics
                # provided.
                # ------------------------------------------------------
                dc = np.diag(stats['cov'])
                mu_n = np.random.multivariate_normal(stats['mean'], dc)

                # Create the Gaussian.
                # ------------------------------------------------------
                gaussian = BayesianGaussianDiagCov(stats['mean'],
                                                   args.kappa,
                                                   args.a,
                                                   b,
                                                   mu_n,
                                                   args.kappa,
                                                   args.a,
                                                   b.copy())

                gaussians.append(gaussian)

            gmms.append(BayesianMixture(args.alpha * np.ones(args.ncomponents),
                                        gaussians))

    # Create the truncated Dirichlet Process prior for the phone loop.
    # ------------------------------------------------------------------
    g1 = np.ones(args.truncation)
    g2 = np.zeros(args.truncation) + args.concentration
    tdp = TruncatedDirichletProcess(g1, g2)

    # Initialize the acoustic model structure of the phone loop.
    # ------------------------------------------------------------------
    acoustic_model = GMMAcousticModel(args.truncation, args.nstates, gmms)

    # Create the decodable graph.
    # ------------------------------------------------------------------
    dgraph = UnigramDecodableGraph(args.truncation, args.nstates)

    # Create the phone loop model.
    # ------------------------------------------------------------------
    model = BayesianInfinitePhoneLoop(tdp, dgraph, acoustic_model)

    # Dump the model on the disk.
    # ------------------------------------------------------------------
    with open(args.output, 'wb') as f:
        pickle.dump(model, f)

if __name__ == '__main__':
    main()
else:
    raise ImportError('this script cannot be imported')
